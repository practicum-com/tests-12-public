import fs from'fs';import path from'path';import mongoose from'mongoose';import urlRegexSafe from'url-regex-safe';import i18next from'i18next';import render from'./render.js';import en from'./locales/en.js';const[,,PROJECT_PATH,LANG='en']=process.argv,userSchema=new mongoose.Schema({name:{type:String,required:[!0,'The "name" field must be filled in'],minlength:[2,'The minimum length of the "name" field is 2'],maxlength:[30,'The maximum length of the "name" field is 30']},avatar:{type:String,required:[!0,'The "avatar" field must be filled in']}},{versionKey:!1}),doPrepare=async a=>{const b=path.join(a,'app.js'),c=path.basename(b);let d;try{d=fs.readFileSync(b,'utf-8')}catch(a){return{id:'structure',values:{type:'file',name:c}}}const e=d.match(urlRegexSafe({strict:!0}))||[],f=e.find(a=>a.startsWith('mongodb://'));if(!f)return{id:'db.uri',values:{name:c}};let g;try{g=await mongoose.connect(f)}catch(a){return{id:'db.connect',values:{message:a.message}}}const h=mongoose.model('user',userSchema),i=await h.create({name:'test',about:'test',avatar:'test'}),j=i._id,k=/[0-9a-fA-F]{24}/i;if(!k.test(d))return{id:'db.id',values:{name:c}};const l=d.replace(k,j);return fs.writeFileSync(b,l),g.disconnect(),!1},init=async(a,b)=>{await i18next.init({lng:b,resources:{en}});try{const b=await doPrepare(a);b&&(render([b]),process.exit(1))}catch(a){console.log(a)}};init(PROJECT_PATH,LANG);